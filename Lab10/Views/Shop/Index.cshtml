@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Shop";
}

<h1 class="header-text page-title">Shop</h1>

<div class="row">
    <div class="col-md-3">
        <h4>Categories</h4>
        <ul class="list-group">
            <li class="list-group-item">
                @* <a asp-controller="Shop" asp-action="AllArticles">All Articles</a> *@
                <a href="javascript:void(0);" onclick="setLastLoadedArticleId(0); setCurrentCategory(0);loadArticles(8)">All Articles</a>
            </li>
            @foreach (var category in ViewBag.Categories)
            {
                    <li class="list-group-item">
                                        <a href="javascript:void(0);" onclick="setLastLoadedArticleId(0); setCurrentCategory(@category.Id); loadArticles(8)">
                        @category.Name
                        </a>
                    </li>
            }
        </ul>
    </div>
    <div class="col-md-9">
         <div id="articles-container" class="row">
            <!-- ARTICLES JHERE -->
        </div>
        <div class="text-center">
            <button id="load-more-button" class="btn btn-primary" onclick="loadArticles(4)">Pokaż kolejne</button>
        </div>
        <div id="no-articles-message" class="alert alert-info" style="display: none;">
            <p>No articles available in this category :(</p>
        </div>
    </div>
</div>


@section Scripts {
    <script>

        //convert categories from razor to js>
        const categoryMap = @Html.Raw(Json.Serialize(((List<Category>)ViewBag.Categories).ToDictionary(c => c.Id, c => c.Name)));
        console.log("Category Map:", categoryMap);


        let lastLoadedArticleId = 0;
        let loadLimit = 4;
        let currentCategory = 0;

        function setLastLoadedArticleId(value) {
                lastLoadedArticleId = value;
            }

        function setCurrentCategory(value) {
                currentCategory = value;
        }

        function loadArticles(loadLimit, categoryId = currentCategory) {
                let url = `/api/articles/lazy?startAfterId=${lastLoadedArticleId}&limit=${loadLimit}`;

            if (categoryId != 0) {
                url += `&categoryId=${categoryId}`;
            }
            fetch(url)
            .then(response => response.text())
            .then(text => {
                console.log(text); 
                const data = JSON.parse(text);
                const articlesContainer = document.getElementById("articles-container");
                const noArticlesMessage = document.getElementById("no-articles-message");

                if(lastLoadedArticleId == 0)
                {
                    articlesContainer.innerHTML = "";
                }

                noArticlesMessage.style.display = "none";

                if (data.length > 0) {
                    data.forEach(item => {
                        const articleElement = document.createElement("div");
                        articleElement.classList.add("col-md-4", "d-flex", "article-item");
                        articleElement.dataset.id = item.id;
                        let categoryText = categoryMap[item.categoryId] || "";
                        articleElement.innerHTML = `
                            <div class="card mb-4 d-flex">
                                <img src="${item.imagePath || '/images/content/default.jpg'}" class="card-img-top" alt="Image" style="height: 200px; object-fit: cover;">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">${item.name}</h5>
                                    <p class="card-text category-name">${categoryText}</p>
                                    <p class="card-text price-text">${item.price}</p>
                                    <div class="mt-auto btn-container">
                                        <a href="/Shop/Details/${item.id}" class="btn btn-secondary">Details</a>
                                        <button class="btn btn-primary add-to-cart" data-id="${item.id}">Add to cart</button>
                                    </div>
                                </div>
                            </div>
                        `;
                        articlesContainer.appendChild(articleElement);
                    });


                    lastLoadedArticleId = data[data.length - 1].id;
                    loadLimit = 4;
                } else {
                    noArticlesMessage.style.display = "block";
                    document.getElementById("load-more-button").style.display = "none";
                }
            })
            .catch(error => {
                console.error("Error loading more articles:", error);
                const noArticlesMessage = document.getElementById("no-articles-message");
                noArticlesMessage.style.display = "block"; 
            });
        }



        document.addEventListener("click", function(event) {
            if (event.target.classList.contains("add-to-cart")) {
                const articleId = event.target.getAttribute("data-id");

                    fetch(`/Shop/AddToCart/${articleId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                    .then(response => {
                        console.log("RAW Response:", response);
                        return response.text(); // Pobierz surowy tekst zamiast od razu parsować JSON
                    })
                    .then(text => {
                        console.log("Response Text:", text); // Zobacz, co faktycznie zwraca serwer
                        return JSON.parse(text); // Spróbuj przekonwertować na JSON
                    })
                    .then(data => {
                        if (data.success) {
                            alert("Added to cart!");
                        } else {
                            alert("Failed to add to cart.");
                        }
                    })
                    .catch(error => console.error("Error adding to cart:", error));

            }
        });



        loadArticles(loadLimit);

    </script>
}